require "prefabutil"

local easing = require("easing")

local assets =
{
    Asset("ANIM", "anim/boat_cannon.zip"),
}

local prefabs =
{
    "cannonball_rock",
    "collapse_small",
}

local function onhammered(inst, worker)
    if inst.components.burnable ~= nil and inst.components.burnable:IsBurning() then
        inst.components.burnable:Extinguish()
    end

    inst.components.lootdropper:DropLoot()
    local fx = SpawnPrefab("collapse_small")
    fx.Transform:SetPosition(inst.Transform:GetWorldPosition())
    fx:SetMaterial("metal")

    -- Is the cannon loaded with ammo? Spawn it.
    local cannoncmp = inst.components.boatcannon
    if cannoncmp and cannoncmp:IsAmmoLoaded() then
        local ammo = SpawnPrefab(cannoncmp.loadedammo .. "_item")
        if ammo then
            local pt = inst:GetPosition()
            ammo.Transform:SetPosition(pt:Get())
            inst.components.lootdropper:FlingItem(ammo, pt)
        end
    end

    inst:Remove()
end

local function onhit(inst, worker)
    if not (inst:HasTag("burnt") or inst.sg:HasStateTag("busy")) then
        inst.sg:GoToState("hit", inst.sg:HasStateTag("light"))
    end
end

local function getstatus(inst, viewer)
    local cannoncmp = inst.components.boatcannon
    if cannoncmp and cannoncmp:IsAmmoLoaded() then
        return "AMMOLOADED"
    else
        return "GENERIC"
    end
end

local function OnEntitySleep(inst)

end

local function OnRemoveEntity(inst)

end

local function onsave(inst, data)
    if inst:HasTag("burnt") or (inst.components.burnable ~= nil and inst.components.burnable:IsBurning()) then
        data.burnt = true
    end

    if inst.components.boatcannon then
        data.loadedammo = inst.components.boatcannon.loadedammo
    end
end

local MONKEY_ISLAND_CENTER_TAGS = { "monkeyqueen" }
local function try_autoorient(inst)
    local autoorientprefab = FindEntity(inst, 100, nil, MONKEY_ISLAND_CENTER_TAGS)
    if autoorientprefab ~= nil then
        local aox, aoy, aoz = autoorientprefab.Transform:GetWorldPosition()
        local angle_awayfrom_aop = inst:GetAngleToPoint(aox, 0, aoz) + 180
        inst.Transform:SetRotation(angle_awayfrom_aop)
    end
end

local function onload(inst, data)
    if data == nil then
        inst.AnimState:HideSymbol("cannon_flap_down")
        return
    end

    if data.burnt and inst.components.burnable ~= nil and inst.components.burnable.onburnt ~= nil then
        inst.components.burnable.onburnt(inst)
    end

    if inst.components.boatcannon then
        inst.components.boatcannon.loadedammo = data.loadedammo

        -- Show/hide anim flap depending on if ammo is loaded or not
        if data.loadedammo ~= nil then
            inst.AnimState:HideSymbol("cannon_flap_up")
            inst:AddTag("ammoloaded")
        else
            inst.AnimState:HideSymbol("cannon_flap_down")
        end
    end

    if data.autogenerated then
        -- Wait a frame to make sure that the thing we're looking for is around.
        inst:DoTaskInTime(0, try_autoorient)
    end
end

local function onbuilt(inst, data)
    inst.sg:GoToState("place")

    local pt = data.pos
    if pt == nil then
        return
    end

    -- Orient the cannon's angle so it points outwards from the center.
    local boat = TheWorld.Map:GetPlatformAtPoint(pt.x, pt.z)
    if boat ~= nil then
        local angle = GetAngleFromBoat(boat, pt.x, pt.z) / DEGREES
        inst.Transform:SetRotation(-angle)
    -- Placing it on the ground; use the placer's rotation, which should use the camera's rotation angle
    else
        inst.Transform:SetRotation(data.rot or 0)
    end
end

local function abletoaccepttest(inst, item)
    return item:HasTag("boatcannon_ammo") and inst.components.boatcannon and inst.components.boatcannon:IsAmmoLoaded()
end

local function ongivenitem(inst, giver, item)
    if inst.components.boatcannon == nil then
        return
    end

    inst.components.boatcannon:LoadAmmo(item)
end

local function onburnt(inst)
	DefaultBurntStructureFn(inst)
end

--------------------------------------------------------------------------

local function fn()
    local inst = CreateEntity()

    inst.entity:AddTransform()
    inst.entity:AddAnimState()
    inst.entity:AddSoundEmitter()
    inst.entity:AddMiniMapEntity()
    inst.entity:AddLight()
    inst.entity:AddNetwork()

    MakeObstaclePhysics(inst, 0.25)

    inst.AnimState:SetBank("boat_cannon")
    inst.AnimState:SetBuild("boat_cannon")
    inst.AnimState:PlayAnimation("idle")

    inst:AddTag("boatcannon")
    inst.Transform:SetEightFaced()

    inst.entity:SetPristine()

    if not TheWorld.ismastersim then
        return inst
    end

    inst:ListenForEvent("onbuilt", onbuilt)

    inst:AddComponent("inspectable")
    inst.components.inspectable.getstatus = getstatus

    MakeSmallBurnable(inst, TUNING.MED_BURNTIME)
    MakeSmallPropagator(inst)
    inst.components.burnable:SetOnBurntFn(onburnt)

    inst:AddComponent("lootdropper")
    inst:AddComponent("workable")
    inst.components.workable:SetWorkAction(ACTIONS.HAMMER)
    inst.components.workable:SetWorkLeft(4)
    inst.components.workable:SetOnFinishCallback(onhammered)
    inst.components.workable:SetOnWorkCallback(onhit)

    inst:AddComponent("savedrotation")

    if inst.components.trader == nil then
        inst:AddComponent("trader")
        inst.components.trader:SetAbleToAcceptTest(abletoaccepttest)
        inst.components.trader.onaccept = ongivenitem
    end

    inst:SetStateGraph("SGboatcannon")

    inst:AddComponent("timer")

    inst.OnSave = onsave
    inst.OnLoad = onload
    inst.OnEntitySleep = OnEntitySleep
    inst.OnRemoveEntity = OnRemoveEntity

    inst:AddComponent("boatcannon")

    MakeHauntableWork(inst)

    return inst
end

local function setup_boat_cannon_placer(inst)
    inst.components.placer.rotate_from_boat_center = true
    inst.components.placer.rotationoffset = 180
end

return Prefab("boat_cannon", fn, assets, prefabs),
    MakeDeployableKitItem("boat_cannon_kit", "boat_cannon", "boat_cannon", "boat_cannon", "kit", assets, nil, {"boat_accessory"}, {fuelvalue = TUNING.LARGE_FUEL}, { deployspacing = DEPLOYSPACING.LESS }),
    MakePlacer("boat_cannon_kit_placer", "boat_cannon", "boat_cannon", "idle", false, false, false, nil, 0, "eight", setup_boat_cannon_placer)
